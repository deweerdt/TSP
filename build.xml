<project name="JTsp" basedir="." default="consumers" >
	<property name="tsp.home" value="." />
	<property name="project.src" value="${tsp.home}/src/jcore" />
	<property name="tsp.consumers" value="${tsp.home}/src/consumers" />
	<property name="project.build" value="${tsp.home}/exec/DEV/java/build" />
	
	<!-- default emply URL for executable -->
	<property name="tsp.url" value="" />
	
	<!-- External Tools -->
	<property name="ext.dir" value="${tsp.home}/external" />
	
	<!-- External : RemoteTea (RPC)  -->
	<property name="ext.rpc.dir" value="${ext.dir}/RemoteTea" />
	<!-- use the nice ant custom task provided by RemoteTea -->
	<taskdef name="jrpcgen" classname="org.acplt.oncrpc.ant.JrpcgenTask"
		classpath="${ext.rpc.dir}/jrpcgen.jar"/>
	<path id="ext.rpc.classpath">
		<pathelement location="${ext.rpc.dir}/oncrpc.jar"/>
	</path>
	
	<!-- External : JSynoptic -->
	<property name="ext.jsynoptic.dir" value="${ext.dir}/jSynoptic" />
	<path id="ext.jsynoptic.classpath">
		<fileset dir="${ext.jsynoptic.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>
		
	<!-- TSP Project configuration -->
	<property name="project.class" value="${project.build}/class-tsp" />
	<property name="project.jar" value="${project.build}/jar" />
	<property name="jar.consumer" value="${project.jar}/tsp-consumer.jar" />
	<patternset id="class.consumer.patternset">
		<exclude name="**/provider/*.class"/>
	</patternset>
	
	<!-- RPC for TSP -->
	<property name="rpc.pref" value="TSP_rpc" />
	<property name="rpc.package" value="tsp.core.rpc" />
	<property name="rpc.dir" value="${project.src}/tsp/core/rpc" />
	<property name="rpc.file" value="${rpc.dir}/${rpc.pref}.x" />
	<!-- Classpath -->
	<path id="project.classpath">
		<path refid="ext.rpc.classpath"/>
	</path>
	<!-- Generic classpath for Tsp clients -->
	<path id="project.client.classpath">
		<path refid="ext.rpc.classpath"/>
		<pathelement location="${jar.consumer}"/>
	</path>
	
	<target name="project-rpc" depends="project-clean">
		<jrpcgen srcfile="${rpc.file}" destdir="${project.src}"
			package="${rpc.package}"/>
		<!-- Hum... jrpcgen custom task does not allow to set the client stub file name, 
 	 	that's the reason of this little hack so a to rename the generated class with the name we really want -->
		<replace file="${rpc.dir}/TSP_rpcClient.java" token="TSP_rpcClient"
			value="TSP_rpcClientStub"/>
		<move file="${rpc.dir}/TSP_rpcClient.java"
			tofile="${rpc.dir}/TSP_rpcClientStub.java"/>
	</target>
	
	<target name="project-build" depends="project-rpc">
		<mkdir dir="${project.build}"/>
		<mkdir dir="${project.class}"/>
		<javac srcdir="${project.src}" destdir="${project.class}">
			<classpath refid="project.classpath"/>
			<include name="**/*.java"/>
		</javac>
	</target>
	
	<target name="project-jar" depends="project-build">
		<mkdir dir="${project.jar}"/>
		<jar destfile="${jar.consumer}">
			<fileset dir="${project.class}" >
				<patternset refid="class.consumer.patternset"/>
			</fileset>
		</jar>
<echo file="${project.jar}/README">
Jar : 
   ${jar.consumer} : The librairie you need to connect to a TSP client
</echo>
	</target>
	
	<target name="project-clean">
		<delete dir="${project.class}"/>
		<delete>
			<fileset dir="${rpc.dir}" includes="${rpc.pref}*.java,TSP_*_t.java"
				/>
		</delete>
	</target>
	
	 <!-- Tests -->
	 <property name="project.test.class" value="${project.build}/class-test-tsp" />	 
	 <property name="project.test.src" value="${tsp.home}/tests/java/jcore/src_test" />	 
	 <property name="project.test.report" value="${project.build}/report-test" />	 
	 <property name="project.test.work" value="${project.test.report}/work" />	 
	 <property name="project.test.html" value="${project.test.report}/html" />	 
	 
	 <target name="test" depends="project-jar">
		<delete dir="${project.test.class}"/>
		<mkdir dir="${project.test.class}"/>
		<javac srcdir="${project.test.src}" destdir="${project.test.class}" >
			<classpath refid="project.client.classpath"/>
			<include name="**/*.java"/>
		</javac>
		<delete dir="${project.test.report}"/>
		<mkdir dir="${project.test.report}"/>
		<mkdir dir="${project.test.work}"/>
		<junit printsummary="withOutAndErr" fork="yes">
			<formatter type="xml"/>
			<classpath>
				<path refid="project.client.classpath"/>
				<pathelement location="${project.test.class}"/>
			</classpath>
			<batchtest todir="${project.test.work}">
				<fileset dir="${project.test.class}" includes="**/*Test.class"/>
			</batchtest>		    		    
		</junit>
	</target>
		
	<target name="test-report" depends="test">
		    <delete dir="${project.test.html}"/>	    	
		 	<junitreport todir="${project.test.work}">
				  <fileset dir="${project.test.work}">
				    <include name="TEST-*.xml"/>
				  </fileset>
				  <report format="frames" todir="${project.test.html}"/>
			</junitreport>
			<echo>Test report generated at : ${project.test.html}/index.html </echo>
	</target>
		
	
	
	<!-- Consumers -->
	<property name="client.jar.dir" value="${project.jar}/consumers" />
	<property name="client-bundle.jar.dir"
		value="${project.jar}/consumers-bundle" />
		
	<!-- Targets -->
	<target name="consumers" depends="jsynoptic,jstdout">
<echo>
Commands that you can use to launch the consumers :
   ant jstdout-run 
   ant jsynoptic-run
	
For jstdout you can choose the provider url with :
       ant jstdout-run -Dtsp.url="urlValue"
where urlValue being :
	protocol://host/serverName:serverNumber
All fields are optional, for example :
	ant jstdout-run -Dtsp.url="///StubbedServer"
	
You can run TSP JUnit test with the command :
   ant test-report   
but to do this, you need to copy junit.jar into the lib directory of
your ant installation (or you can add junit.jar to your global
CLASSPATH if you do not want to modify ant lib directory)
You can get junit.jar at : http://www.junit.org
</echo>
	</target>
	
	<target name="client-jar-dir">
		<mkdir dir="${client.jar.dir}"/>
		<mkdir dir="${client-bundle.jar.dir}"/>
<echo file="${client.jar.dir}/README">
You need ${jar.consumer} to run these consumers
</echo>
<echo file="${client-bundle.jar.dir}/README">
You do not need ${jar.consumer} to run these consumers.
</echo>
	</target>
	
	<!-- Consumers 1 : JSynoptic Plugin  -->
	<property name="jsynoptic.src" value="${tsp.consumers}/jsynoptic" />
	<property name="jsynoptic.class" value="${project.build}/class-jsynoptic" />
	<property name="jar.jsynoptic"
		value="${client.jar.dir}/jsynoptic-tsp-plugin.jar" />
	<property name="jar.jsynoptic-bundle"
		value="${client-bundle.jar.dir}/jsynoptic-tsp-plugin-bundle.jar" />
	<path id="jsynoptic.classpath">
		<path refid="ext.jsynoptic.classpath"/>
		<path refid="project.client.classpath"/>
	</path>
	
	<target name="jsynoptic"
		depends="client-jar-dir, project-jar, jsynoptic-clean">
		<mkdir dir="${jsynoptic.class}"/>
		<javac srcdir="${jsynoptic.src}" destdir="${jsynoptic.class}" >
			<classpath refid="jsynoptic.classpath"/>
			<include name="**/*.java"/>
		</javac>
		<!-- add the images to class files -->
		<copy todir="${jsynoptic.class}/tsp/consumer/jsynoptic">
			<fileset dir="${jsynoptic.src}" includes="**/*.png"/>
		</copy>
		<!-- create simple et bundled jar -->
		<jar destfile="${jar.jsynoptic}" basedir="${jsynoptic.class}" />
		<jar destfile="${jar.jsynoptic-bundle}">
			<fileset dir="${jsynoptic.class}" />
			<fileset dir="${project.class}" >
				<patternset refid="class.consumer.patternset"/>
			</fileset>
		</jar>
	</target>
	
	<target name="jsynoptic-clean">
		<delete dir="${jsynoptic.class}"/>
	</target>
	
	<target name="jsynoptic-run">
		<java classname="jsynoptic.ui.Run" fork="true">
			<classpath refid="jsynoptic.classpath"/>
			<classpath location="${jar.jsynoptic}" />
		</java>
	</target>
	
	<!-- Consumer 2 : JStdout  -->
	<property name="jstdout.src" value="${tsp.consumers}/jstdout" />
	<property name="jstdout.class" value="${project.build}/class-jstdout" />
	<property name="jar.jstdout" value="${client.jar.dir}/jstdout.jar" />
	<property name="jar.jstdout-bundle"
		value="${client-bundle.jar.dir}/jstdout-bundle.jar" />
	<path id="jstdout.classpath">
		<path refid="project.client.classpath"/>
	</path>
	
	<target name="jstdout" depends="client-jar-dir, project-jar, jstdout-clean">
		<mkdir dir="${jstdout.class}"/>
		<javac srcdir="${jstdout.src}" destdir="${jstdout.class}" >
			<classpath refid="jstdout.classpath"/>
			<include name="**/*.java"/>
		</javac>
		<!-- create simple et bundled jar -->
		<jar destfile="${jar.jstdout}" basedir="${jstdout.class}" />
		<jar destfile="${jar.jstdout-bundle}">
			<fileset dir="${jstdout.class}" />
			<fileset dir="${project.class}" >
				<patternset refid="class.consumer.patternset"/>
			</fileset>
		</jar>
	</target>
	
	<target name="jstdout-clean">
		<delete dir="${jstdout.class}"/>
	</target>
	
	<target name="jstdout-run">
		<java classname="tsp.consumer.jtspStdOut" fork="true">
			<classpath refid="jstdout.classpath"/>
			<classpath location="${jar.jstdout}" />
			<arg value="${tsp.url}"/>
			<arg value="1"/>
			<arg value="10"/>
		</java>
	</target>
	
	<!-- Clean all -->
	<target name="clean-all"
		depends="project-clean, jsynoptic-clean, jstdout-clean"/>
		
</project>
