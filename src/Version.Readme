-------------------------------------------------------------------------------
	 Historique des Versions TSP
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
V-0.1: 	Creation 01/06/2000		tag TSP_0_1	SG
	Consummer and provider works util connection and data send.
	x consummers are able to connect to y  providers
	Deconnection is not implemented
	client1 is the test program for the consumer library
	server1 is the test program for the provider library
	This version will not work for provider and consumer hosts with heterogenous endianity
	XDR encoding (slow), or XDR pseudo encoding (fast ! ) may be choosen at compil time with flag TSP_NO_XDR_ENCODE 

V-0.2: Creation 06/09/02	tag TSP_0_2 SG
	Same as V-0.1
	Linux portage + linux makefiles dependencies works
        Should work on Solaris sparcv9 with gcc 64 bits
     
V-0.3: Creation 18/09/02	tag TSP_0_3 SG
	Same as V-0.2
	Dec portage + Dec makefiles dependencies work
	Works on Solaris 64bits
	Test automatisation for stage001 thrue tsp_autotest001
	Complete target autodetection thrue source tsp_dev.login

V-0.3.1: Creation 19/09/02	tag TSP_0_3_1 SG
	Same as V-0.3 
	test STAGE2 used to test groups calculation

	As this version is still with n ringbuf on the client side,
	here is a CPU load information for this version (1 server, 1 client, 1000 symbols
	100 Hz on host tibain) :
  	PID USERNAME THR PRI NICE  SIZE   RES STATE   TIME    CPU COMMAND
	27172 galles     3  41    0   18M   17M sleep   0:49 35.10% tsp_client1
	27334 galles     1  31    0 1504K 1344K cpu     0:00  1.21% top5.5
	27330 galles     1  51    0 1224K 1096K sleep   0:00  0.52% top
	26713 galles     1  58    0 3200K 2776K sleep   0:00  0.20% xterm
	27169 galles     5  58    0   33M   33M sleep   0:00  0.14% tsp_serveur1

V-0.4: Creation 03/10/02	tag TSP_0_4 SG
	Same as V-0.3.1 
	test STAGE3 used to test pasive data stream with two
	differents consumers asking for two differents pasive stream

	The pasive stream is read from a RES file (double res file and
	float res files supported). The tsp_client3 is able to produce
	a new RES file with the data stream

	The test uses the programs bin2asc and diff to compare the created
	RES file, and the original RES file

	Added in this version :
	- On the consumer side, onz single ringbuf is now used for every symbols
	- The consumer stop getting data from the socket when its output ringbuf
	is going to be full (as a consequency, the TSP consumer library does not
	need to know if a data stream is a pasive or an active one, as the stream
	is auto-regulated between the consumer and the provider (by the consumer) )
	- As a pasive stream may end, an EOF was created for the consumer to
	know when its file must be closed
	- On the consumer and provider side the init function are able to catch tsp
	specific normalized command line arguments from the command line "à la GTK" :
		- [ --tsp-stream-init-start commands ... --tsp-stream-init ] allows
		to send stream init command from the consumer to the provider ; the
		same command can be used on the provider command line
		- [ --tsp-server-number number ] set the server number on the 
		provider side (0 is default)
	 
V-0.4.1: Creation 09/10/02 	tag TSP_0_4_1 SG
	snapshot developpement version before huge modification for TL1 link
	- fifo and thread send was implemented for socket write (active stream only)

V-0.5: Creation 18/12/02 	tag TSP_0_5 SG
	- libUTIL added in test dir
	- Buffer overflow detected both on the GLU side and for the consumer buffer
	  (provider side)
	- garbage collector for the acidentally disconnected sessions
	- 'request close' implementation works

V-0.5.1: Creation 24/12/02 	tag TSP_0_5_1 SG
	- Plenty of comments added in header files

V-0.5.2: Creation 01/02/03  	tag TSP_0_5_2 YD
	- Moved tests upper, and split consumers & providers
	- add tsp_gdisp for graphical consumer

V-0.5.3: Creation 14/03/03  	tag TSP_0_5_3 YD
	- Change Makefile philosophy
	- Bug Fix : Tsp_gdisp corrected by commiting in binary type
	- Bug Fix : res_reader don't forgot any more the two first lines

V-0.6.0: Creation 13/01/04	tag TSP_0_6_0	YD
        - Gestion de plusieurs protocoles asynchrone (alpha)  - Erk
        - Corrections mineures scripts configure pour 
          une meilleure gestion automatique de Java           - Erk
        - Correction script javarun.sh pour utiliser RemoteTea
          contenu dans TSP                                    - Erk
        - Correction creation liens symboliques sous Linux  
          dans Makefile et install_version                    - Erk

V-0.6.1: Creation 26/05/04	tag TSP_0_6_1	YD	
        - Adding tsp_gdisp+ in source version		    	- Euskadi 
	- Make again the things work on DEC/Alpha stations	- YD
	- Add jSynoptic plugins for JAVA consumer		- CP 
	- Add VxWorks support					- JL/RP

V-0.6.2: Creation 20/10/04	tag TSP_0_6_2	RP	
	- Change get_next_item to push method			- YD
	- Add OpenBSD Support					- FD
	- Defined an URL strategy for connection		- RP
	- Use a 'port free' detection strategy for RPC init	- RP
	- Make again the things work on DEC/Alpha stations	- RP
	- HEXA display for GDISP				- EN

V-0.6.x: Creation ??/??/04	tag TSP_0_6_X	??	
        - What was done						- ??
