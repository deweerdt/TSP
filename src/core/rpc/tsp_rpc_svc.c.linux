#ifdef VXWORKS
#define static extern
#endif /* !VXWORKS */
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "rpc/tsp_rpc.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif
#define TSP_STRACE_RPC_ERROR(cl, pResult) if(!pResult) { STRACE_ERROR("%s", clnt_sperror(cl, "")); }

static TSP_provider_info_t *
_tsp_provider_information_1 (void  *argp, struct svc_req *rqstp)
{
	return (tsp_provider_information_1_svc(rqstp));
}

static TSP_answer_open_t *
_tsp_request_open_1 (TSP_request_open_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_open_1_svc(*argp, rqstp));
}

static int *
_tsp_request_close_1 (TSP_request_close_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_close_1_svc(*argp, rqstp));
}

static TSP_answer_sample_t *
_tsp_request_information_1 (TSP_request_information_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_information_1_svc(*argp, rqstp));
}

static TSP_answer_feature_t *
_tsp_request_feature_1 (TSP_request_feature_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_feature_1_svc(*argp, rqstp));
}

static TSP_answer_sample_t *
_tsp_request_sample_1 (TSP_request_sample_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_sample_1_svc(*argp, rqstp));
}

static TSP_answer_sample_init_t *
_tsp_request_sample_init_1 (TSP_request_sample_init_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_sample_init_1_svc(*argp, rqstp));
}

static TSP_answer_sample_destroy_t *
_tsp_request_sample_destroy_1 (TSP_request_sample_destroy_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_sample_destroy_1_svc(*argp, rqstp));
}

static int *
_tsp_exec_feature_1 (TSP_exec_feature_t  *argp, struct svc_req *rqstp)
{
	return (tsp_exec_feature_1_svc(*argp, rqstp));
}

static int *
_tsp_request_async_sample_write_1 (TSP_async_sample_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_async_sample_write_1_svc(*argp, rqstp));
}

static TSP_async_sample_t *
_tsp_request_async_sample_read_1 (TSP_async_sample_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_async_sample_read_1_svc(*argp, rqstp));
}

static TSP_answer_sample_t *
_tsp_request_filtered_information_1 (tsp_request_filtered_information_1_argument *argp, struct svc_req *rqstp)
{
	return (tsp_request_filtered_information_1_svc(argp->arg1, argp->arg2, argp->arg3, rqstp));
}

static TSP_answer_extended_information_t *
_tsp_request_extended_information_1 (TSP_request_extended_information_t  *argp, struct svc_req *rqstp)
{
	return (tsp_request_extended_information_1_svc(*argp, rqstp));
}

void
tsp_rpc_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		TSP_request_open_t tsp_request_open_1_arg;
		TSP_request_close_t tsp_request_close_1_arg;
		TSP_request_information_t tsp_request_information_1_arg;
		TSP_request_feature_t tsp_request_feature_1_arg;
		TSP_request_sample_t tsp_request_sample_1_arg;
		TSP_request_sample_init_t tsp_request_sample_init_1_arg;
		TSP_request_sample_destroy_t tsp_request_sample_destroy_1_arg;
		TSP_exec_feature_t tsp_exec_feature_1_arg;
		TSP_async_sample_t tsp_request_async_sample_write_1_arg;
		TSP_async_sample_t tsp_request_async_sample_read_1_arg;
		tsp_request_filtered_information_1_argument tsp_request_filtered_information_1_arg;
		TSP_request_extended_information_t tsp_request_extended_information_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case TSP_PROVIDER_INFORMATION:
		_xdr_argument = (xdrproc_t) xdr_void;
		_xdr_result = (xdrproc_t) xdr_TSP_provider_info_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_provider_information_1;
		break;

	case TSP_REQUEST_OPEN:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_open_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_open_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_open_1;
		break;

	case TSP_REQUEST_CLOSE:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_close_t;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_close_1;
		break;

	case TSP_REQUEST_INFORMATION:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_information_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_sample_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_information_1;
		break;

	case TSP_REQUEST_FEATURE:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_feature_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_feature_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_feature_1;
		break;

	case TSP_REQUEST_SAMPLE:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_sample_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_sample_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_sample_1;
		break;

	case TSP_REQUEST_SAMPLE_INIT:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_sample_init_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_sample_init_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_sample_init_1;
		break;

	case TSP_REQUEST_SAMPLE_DESTROY:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_sample_destroy_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_sample_destroy_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_sample_destroy_1;
		break;

	case TSP_EXEC_FEATURE:
		_xdr_argument = (xdrproc_t) xdr_TSP_exec_feature_t;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) _tsp_exec_feature_1;
		break;

	case TSP_REQUEST_ASYNC_SAMPLE_WRITE:
		_xdr_argument = (xdrproc_t) xdr_TSP_async_sample_t;
		_xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_async_sample_write_1;
		break;

	case TSP_REQUEST_ASYNC_SAMPLE_READ:
		_xdr_argument = (xdrproc_t) xdr_TSP_async_sample_t;
		_xdr_result = (xdrproc_t) xdr_TSP_async_sample_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_async_sample_read_1;
		break;

	case TSP_REQUEST_FILTERED_INFORMATION:
		_xdr_argument = (xdrproc_t) xdr_tsp_request_filtered_information_1_argument;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_sample_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_filtered_information_1;
		break;

	case TSP_REQUEST_EXTENDED_INFORMATION:
		_xdr_argument = (xdrproc_t) xdr_TSP_request_extended_information_t;
		_xdr_result = (xdrproc_t) xdr_TSP_answer_extended_information_t;
		local = (char *(*)(char *, struct svc_req *)) _tsp_request_extended_information_1;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}
