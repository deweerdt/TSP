/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _TSP_RPC_H_RPCGEN
#define _TSP_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum TSP_status_t {
	TSP_STATUS_OK = 0,
	TSP_STATUS_NOK = 1,
	TSP_STATUS_ERROR_PROVIDER_UNREACHABLE = 2,
	TSP_STATUS_ERROR_UNKNOWN = 3,
	TSP_STATUS_ERROR_SEE_STRING = 4,
	TSP_STATUS_ERROR_VERSION = 5,
	TSP_STATUS_ERROR_SYMBOLS = 6,
	TSP_STATUS_ERROR_SYMBOL_FILTER = 7,
	TSP_STATUS_ERROR_NOT_SUPPORTED = 8,
	TSP_STATUS_ERROR_NOT_IMPLEMENTED = 9,
	TSP_STATUS_ERROR_PGI_UNKNOWN = 10,
	TSP_STATUS_ERROR_ASYNC_READ_NOT_ALLOWED = 11,
	TSP_STATUS_ERROR_ASYNC_WRITE_NOT_ALLOWED = 12,
	TSP_STATUS_ERROR_ASYNC_READ_NOT_SUPPORTED = 13,
	TSP_STATUS_ERROR_ASYNC_WRITE_NOT_SUPPORTED = 14,
	TSP_STATUS_ERROR_MEMORY_ALLOCATION = 15,
	TSP_STATUS_ERROR_INVALID_CHANNEL_ID = 16,
	TSP_STATUS_ERROR_NO_MORE_GLU = 17,
	TSP_STATUS_ERROR_NO_MORE_SESSION = 18,
	TSP_STATUS_ERROR_GLU_START = 19,
	TSP_STATUS_ERROR_GLU_INITIALIZE = 20,
	TSP_STATUS_ERROR_BAD_REQUEST_ORDER = 21,
	TSP_STATUS_ERROR_DATAPOOL_INSTANTIATE = 22,
	TSP_STATUS_ERROR_THREAD_CREATE = 23,
	TSP_STATUS_ERROR_NOT_INITIALIZED = 24,
	TSP_STATUS_ERROR_INVALID_REQUEST = 25,
	TSP_STATUS_ERROR_EMPTY_REQUEST_SAMPLE = 26,
	TSP_STATUS_ERROR_CUSTOM_BEGIN = 16384,
};
typedef enum TSP_status_t TSP_status_t;

enum TSP_session_state_t {
	TSP_SESSION_STATE_UNKNOWN = 0,
	TSP_SESSION_STATE_OPENED = 1,
	TSP_SESSION_STATE_CLOSED = 2,
	TSP_SESSION_STATE_REQUEST_SAMPLE_OK = 3,
	TSP_SESSION_STATE_REQUEST_SAMPLE_INIT_OK = 4,
	TSP_SESSION_STATE_SAMPLING = 5,
	TSP_SESSION_STATE_REQUEST_SAMPLE_DESTROY_OK = 6,
	TSP_SESSION_STATE_BROKEN_LINK = 7,
	TSP_SESSION_STATE_CLOSE_ON_EOF = 8,
};
typedef enum TSP_session_state_t TSP_session_state_t;

enum TSP_datatype_t {
	TSP_TYPE_UNKNOWN = 0,
	TSP_TYPE_DOUBLE = 1,
	TSP_TYPE_FLOAT = 2,
	TSP_TYPE_INT8 = 3,
	TSP_TYPE_INT16 = 4,
	TSP_TYPE_INT32 = 5,
	TSP_TYPE_INT64 = 6,
	TSP_TYPE_UINT8 = 7,
	TSP_TYPE_UINT16 = 8,
	TSP_TYPE_UINT32 = 9,
	TSP_TYPE_UINT64 = 10,
	TSP_TYPE_CHAR = 11,
	TSP_TYPE_UCHAR = 12,
	TSP_TYPE_RAW = 13,
	TSP_TYPE_LAST = 14,
};
typedef enum TSP_datatype_t TSP_datatype_t;

struct TSP_answer_open_t {
	int version_id;
	u_int channel_id;
	TSP_status_t status;
	char *status_str;
};
typedef struct TSP_answer_open_t TSP_answer_open_t;

typedef char *TSP_argv_item_t;

typedef struct {
	u_int TSP_argv_t_len;
	TSP_argv_item_t *TSP_argv_t_val;
} TSP_argv_t;

struct TSP_request_open_t {
	int version_id;
	TSP_argv_t argv;
};
typedef struct TSP_request_open_t TSP_request_open_t;

struct TSP_request_close_t {
	int version_id;
	u_int channel_id;
};
typedef struct TSP_request_close_t TSP_request_close_t;

struct TSP_request_information_t {
	int version_id;
	u_int channel_id;
};
typedef struct TSP_request_information_t TSP_request_information_t;

struct TSP_request_feature_t {
	int version_id;
	u_int channel_id;
	u_int feature_words[4];
};
typedef struct TSP_request_feature_t TSP_request_feature_t;

struct TSP_answer_feature_t {
	int version_id;
	u_int channel_id;
	u_int feature_words[4];
	int int_value;
	double double_value;
	char *string_value;
	TSP_status_t status;
};
typedef struct TSP_answer_feature_t TSP_answer_feature_t;

struct TSP_exec_feature_t {
	int version_id;
	u_int channel_id;
	u_int feature_words[4];
	int int_value;
	double double_value;
	char *string_value;
};
typedef struct TSP_exec_feature_t TSP_exec_feature_t;

struct TSP_sample_symbol_info_t {
	char *name;
	int provider_global_index;
	int provider_group_index;
	int provider_group_rank;
	TSP_datatype_t type;
	u_int dimension;
	u_int offset;
	u_int nelem;
	int period;
	int phase;
};
typedef struct TSP_sample_symbol_info_t TSP_sample_symbol_info_t;

typedef struct {
	u_int TSP_sample_symbol_info_list_t_len;
	TSP_sample_symbol_info_t *TSP_sample_symbol_info_list_t_val;
} TSP_sample_symbol_info_list_t;

struct TSP_extended_info_t {
	char *key;
	char *value;
};
typedef struct TSP_extended_info_t TSP_extended_info_t;

typedef struct {
	u_int TSP_extended_info_list_t_len;
	TSP_extended_info_t *TSP_extended_info_list_t_val;
} TSP_extended_info_list_t;

struct TSP_sample_symbol_extended_info_t {
	int provider_global_index;
	TSP_extended_info_list_t info;
};
typedef struct TSP_sample_symbol_extended_info_t TSP_sample_symbol_extended_info_t;

typedef struct {
	u_int TSP_sample_symbol_extended_info_list_t_len;
	TSP_sample_symbol_extended_info_t *TSP_sample_symbol_extended_info_list_t_val;
} TSP_sample_symbol_extended_info_list_t;

struct TSP_request_extended_information_t {
	int version_id;
	u_int channel_id;
	struct {
		u_int pgi_len;
		int *pgi_val;
	} pgi;
};
typedef struct TSP_request_extended_information_t TSP_request_extended_information_t;

struct TSP_answer_extended_information_t {
	int version_id;
	u_int channel_id;
	TSP_sample_symbol_extended_info_list_t extsymbols;
	TSP_status_t status;
};
typedef struct TSP_answer_extended_information_t TSP_answer_extended_information_t;

struct TSP_request_sample_t {
	int version_id;
	u_int channel_id;
	u_int feature_words[4];
	int consumer_timeout;
	TSP_sample_symbol_info_list_t symbols;
};
typedef struct TSP_request_sample_t TSP_request_sample_t;

struct TSP_answer_sample_t {
	int version_id;
	u_int channel_id;
	int provider_timeout;
	int provider_group_number;
	TSP_sample_symbol_info_list_t symbols;
	double base_frequency;
	int max_period;
	int max_client_number;
	int current_client_number;
	TSP_status_t status;
};
typedef struct TSP_answer_sample_t TSP_answer_sample_t;

struct TSP_request_sample_init_t {
	int version_id;
	u_int channel_id;
};
typedef struct TSP_request_sample_init_t TSP_request_sample_init_t;

struct TSP_answer_sample_init_t {
	int version_id;
	u_int channel_id;
	char *data_address;
	TSP_status_t status;
};
typedef struct TSP_answer_sample_init_t TSP_answer_sample_init_t;

struct TSP_request_sample_destroy_t {
	int version_id;
	u_int channel_id;
};
typedef struct TSP_request_sample_destroy_t TSP_request_sample_destroy_t;

struct TSP_answer_sample_destroy_t {
	int version_id;
	u_int channel_id;
	int status;
};
typedef struct TSP_answer_sample_destroy_t TSP_answer_sample_destroy_t;

struct TSP_async_sample_t {
	int provider_global_index;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct TSP_async_sample_t TSP_async_sample_t;

struct TSP_request_async_sample_t {
	int version_id;
	u_int channel_id;
	TSP_async_sample_t async_sample;
};
typedef struct TSP_request_async_sample_t TSP_request_async_sample_t;

struct TSP_answer_async_sample_t {
	int version_id;
	u_int channel_id;
	TSP_async_sample_t async_sample;
	int status;
};
typedef struct TSP_answer_async_sample_t TSP_answer_async_sample_t;

struct TSP_provider_info_t {
	char *info;
};
typedef struct TSP_provider_info_t TSP_provider_info_t;
#define TSP_STRACE_RPC_ERROR(cl, pResult) if(!pResult) { STRACE_ERROR("%s", clnt_sperror(cl, "")); }

struct tsp_request_filtered_information_1_argument {
	TSP_request_information_t arg1;
	int arg2;
	char *arg3;
};
typedef struct tsp_request_filtered_information_1_argument tsp_request_filtered_information_1_argument;

#define TSP_RPC 0x31230010
#define TSP_RPC_VERSION_INITIAL 1

#if defined(__STDC__) || defined(__cplusplus)
#define TSP_PROVIDER_INFORMATION 101
extern  TSP_provider_info_t * tsp_provider_information_1(CLIENT *);
extern  TSP_provider_info_t * tsp_provider_information_1_svc(struct svc_req *);
#define TSP_REQUEST_OPEN 102
extern  TSP_answer_open_t * tsp_request_open_1(TSP_request_open_t , CLIENT *);
extern  TSP_answer_open_t * tsp_request_open_1_svc(TSP_request_open_t , struct svc_req *);
#define TSP_REQUEST_CLOSE 103
extern  int * tsp_request_close_1(TSP_request_close_t , CLIENT *);
extern  int * tsp_request_close_1_svc(TSP_request_close_t , struct svc_req *);
#define TSP_REQUEST_INFORMATION 104
extern  TSP_answer_sample_t * tsp_request_information_1(TSP_request_information_t , CLIENT *);
extern  TSP_answer_sample_t * tsp_request_information_1_svc(TSP_request_information_t , struct svc_req *);
#define TSP_REQUEST_FEATURE 105
extern  TSP_answer_feature_t * tsp_request_feature_1(TSP_request_feature_t , CLIENT *);
extern  TSP_answer_feature_t * tsp_request_feature_1_svc(TSP_request_feature_t , struct svc_req *);
#define TSP_REQUEST_SAMPLE 106
extern  TSP_answer_sample_t * tsp_request_sample_1(TSP_request_sample_t , CLIENT *);
extern  TSP_answer_sample_t * tsp_request_sample_1_svc(TSP_request_sample_t , struct svc_req *);
#define TSP_REQUEST_SAMPLE_INIT 107
extern  TSP_answer_sample_init_t * tsp_request_sample_init_1(TSP_request_sample_init_t , CLIENT *);
extern  TSP_answer_sample_init_t * tsp_request_sample_init_1_svc(TSP_request_sample_init_t , struct svc_req *);
#define TSP_REQUEST_SAMPLE_DESTROY 108
extern  TSP_answer_sample_destroy_t * tsp_request_sample_destroy_1(TSP_request_sample_destroy_t , CLIENT *);
extern  TSP_answer_sample_destroy_t * tsp_request_sample_destroy_1_svc(TSP_request_sample_destroy_t , struct svc_req *);
#define TSP_EXEC_FEATURE 109
extern  int * tsp_exec_feature_1(TSP_exec_feature_t , CLIENT *);
extern  int * tsp_exec_feature_1_svc(TSP_exec_feature_t , struct svc_req *);
#define TSP_REQUEST_ASYNC_SAMPLE_WRITE 110
extern  int * tsp_request_async_sample_write_1(TSP_async_sample_t , CLIENT *);
extern  int * tsp_request_async_sample_write_1_svc(TSP_async_sample_t , struct svc_req *);
#define TSP_REQUEST_ASYNC_SAMPLE_READ 111
extern  TSP_async_sample_t * tsp_request_async_sample_read_1(TSP_async_sample_t , CLIENT *);
extern  TSP_async_sample_t * tsp_request_async_sample_read_1_svc(TSP_async_sample_t , struct svc_req *);
#define TSP_REQUEST_FILTERED_INFORMATION 112
extern  TSP_answer_sample_t * tsp_request_filtered_information_1(TSP_request_information_t , int , char *, CLIENT *);
extern  TSP_answer_sample_t * tsp_request_filtered_information_1_svc(TSP_request_information_t , int , char *, struct svc_req *);
#define TSP_REQUEST_EXTENDED_INFORMATION 113
extern  TSP_answer_extended_information_t * tsp_request_extended_information_1(TSP_request_extended_information_t , CLIENT *);
extern  TSP_answer_extended_information_t * tsp_request_extended_information_1_svc(TSP_request_extended_information_t , struct svc_req *);
extern int tsp_rpc_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define TSP_PROVIDER_INFORMATION 101
extern  TSP_provider_info_t * tsp_provider_information_1();
extern  TSP_provider_info_t * tsp_provider_information_1_svc();
#define TSP_REQUEST_OPEN 102
extern  TSP_answer_open_t * tsp_request_open_1();
extern  TSP_answer_open_t * tsp_request_open_1_svc();
#define TSP_REQUEST_CLOSE 103
extern  int * tsp_request_close_1();
extern  int * tsp_request_close_1_svc();
#define TSP_REQUEST_INFORMATION 104
extern  TSP_answer_sample_t * tsp_request_information_1();
extern  TSP_answer_sample_t * tsp_request_information_1_svc();
#define TSP_REQUEST_FEATURE 105
extern  TSP_answer_feature_t * tsp_request_feature_1();
extern  TSP_answer_feature_t * tsp_request_feature_1_svc();
#define TSP_REQUEST_SAMPLE 106
extern  TSP_answer_sample_t * tsp_request_sample_1();
extern  TSP_answer_sample_t * tsp_request_sample_1_svc();
#define TSP_REQUEST_SAMPLE_INIT 107
extern  TSP_answer_sample_init_t * tsp_request_sample_init_1();
extern  TSP_answer_sample_init_t * tsp_request_sample_init_1_svc();
#define TSP_REQUEST_SAMPLE_DESTROY 108
extern  TSP_answer_sample_destroy_t * tsp_request_sample_destroy_1();
extern  TSP_answer_sample_destroy_t * tsp_request_sample_destroy_1_svc();
#define TSP_EXEC_FEATURE 109
extern  int * tsp_exec_feature_1();
extern  int * tsp_exec_feature_1_svc();
#define TSP_REQUEST_ASYNC_SAMPLE_WRITE 110
extern  int * tsp_request_async_sample_write_1();
extern  int * tsp_request_async_sample_write_1_svc();
#define TSP_REQUEST_ASYNC_SAMPLE_READ 111
extern  TSP_async_sample_t * tsp_request_async_sample_read_1();
extern  TSP_async_sample_t * tsp_request_async_sample_read_1_svc();
#define TSP_REQUEST_FILTERED_INFORMATION 112
extern  TSP_answer_sample_t * tsp_request_filtered_information_1();
extern  TSP_answer_sample_t * tsp_request_filtered_information_1_svc();
#define TSP_REQUEST_EXTENDED_INFORMATION 113
extern  TSP_answer_extended_information_t * tsp_request_extended_information_1();
extern  TSP_answer_extended_information_t * tsp_request_extended_information_1_svc();
extern int tsp_rpc_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_TSP_status_t (XDR *, TSP_status_t*);
extern  bool_t xdr_TSP_session_state_t (XDR *, TSP_session_state_t*);
extern  bool_t xdr_TSP_datatype_t (XDR *, TSP_datatype_t*);
extern  bool_t xdr_TSP_answer_open_t (XDR *, TSP_answer_open_t*);
extern  bool_t xdr_TSP_argv_item_t (XDR *, TSP_argv_item_t*);
extern  bool_t xdr_TSP_argv_t (XDR *, TSP_argv_t*);
extern  bool_t xdr_TSP_request_open_t (XDR *, TSP_request_open_t*);
extern  bool_t xdr_TSP_request_close_t (XDR *, TSP_request_close_t*);
extern  bool_t xdr_TSP_request_information_t (XDR *, TSP_request_information_t*);
extern  bool_t xdr_TSP_request_feature_t (XDR *, TSP_request_feature_t*);
extern  bool_t xdr_TSP_answer_feature_t (XDR *, TSP_answer_feature_t*);
extern  bool_t xdr_TSP_exec_feature_t (XDR *, TSP_exec_feature_t*);
extern  bool_t xdr_TSP_sample_symbol_info_t (XDR *, TSP_sample_symbol_info_t*);
extern  bool_t xdr_TSP_sample_symbol_info_list_t (XDR *, TSP_sample_symbol_info_list_t*);
extern  bool_t xdr_TSP_extended_info_t (XDR *, TSP_extended_info_t*);
extern  bool_t xdr_TSP_extended_info_list_t (XDR *, TSP_extended_info_list_t*);
extern  bool_t xdr_TSP_sample_symbol_extended_info_t (XDR *, TSP_sample_symbol_extended_info_t*);
extern  bool_t xdr_TSP_sample_symbol_extended_info_list_t (XDR *, TSP_sample_symbol_extended_info_list_t*);
extern  bool_t xdr_TSP_request_extended_information_t (XDR *, TSP_request_extended_information_t*);
extern  bool_t xdr_TSP_answer_extended_information_t (XDR *, TSP_answer_extended_information_t*);
extern  bool_t xdr_TSP_request_sample_t (XDR *, TSP_request_sample_t*);
extern  bool_t xdr_TSP_answer_sample_t (XDR *, TSP_answer_sample_t*);
extern  bool_t xdr_TSP_request_sample_init_t (XDR *, TSP_request_sample_init_t*);
extern  bool_t xdr_TSP_answer_sample_init_t (XDR *, TSP_answer_sample_init_t*);
extern  bool_t xdr_TSP_request_sample_destroy_t (XDR *, TSP_request_sample_destroy_t*);
extern  bool_t xdr_TSP_answer_sample_destroy_t (XDR *, TSP_answer_sample_destroy_t*);
extern  bool_t xdr_TSP_async_sample_t (XDR *, TSP_async_sample_t*);
extern  bool_t xdr_TSP_request_async_sample_t (XDR *, TSP_request_async_sample_t*);
extern  bool_t xdr_TSP_answer_async_sample_t (XDR *, TSP_answer_async_sample_t*);
extern  bool_t xdr_TSP_provider_info_t (XDR *, TSP_provider_info_t*);
extern  bool_t xdr_tsp_request_filtered_information_1_argument (XDR *, tsp_request_filtered_information_1_argument*);

#else /* K&R C */
extern bool_t xdr_TSP_status_t ();
extern bool_t xdr_TSP_session_state_t ();
extern bool_t xdr_TSP_datatype_t ();
extern bool_t xdr_TSP_answer_open_t ();
extern bool_t xdr_TSP_argv_item_t ();
extern bool_t xdr_TSP_argv_t ();
extern bool_t xdr_TSP_request_open_t ();
extern bool_t xdr_TSP_request_close_t ();
extern bool_t xdr_TSP_request_information_t ();
extern bool_t xdr_TSP_request_feature_t ();
extern bool_t xdr_TSP_answer_feature_t ();
extern bool_t xdr_TSP_exec_feature_t ();
extern bool_t xdr_TSP_sample_symbol_info_t ();
extern bool_t xdr_TSP_sample_symbol_info_list_t ();
extern bool_t xdr_TSP_extended_info_t ();
extern bool_t xdr_TSP_extended_info_list_t ();
extern bool_t xdr_TSP_sample_symbol_extended_info_t ();
extern bool_t xdr_TSP_sample_symbol_extended_info_list_t ();
extern bool_t xdr_TSP_request_extended_information_t ();
extern bool_t xdr_TSP_answer_extended_information_t ();
extern bool_t xdr_TSP_request_sample_t ();
extern bool_t xdr_TSP_answer_sample_t ();
extern bool_t xdr_TSP_request_sample_init_t ();
extern bool_t xdr_TSP_answer_sample_init_t ();
extern bool_t xdr_TSP_request_sample_destroy_t ();
extern bool_t xdr_TSP_answer_sample_destroy_t ();
extern bool_t xdr_TSP_async_sample_t ();
extern bool_t xdr_TSP_request_async_sample_t ();
extern bool_t xdr_TSP_answer_async_sample_t ();
extern bool_t xdr_TSP_provider_info_t ();
extern bool_t xdr_tsp_request_filtered_information_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_TSP_RPC_H_RPCGEN */
